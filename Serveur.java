
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ESSOLA JULIEN
 */
public class Serveur extends javax.swing.JFrame {

   static String url="jdbc:mysql://localhost:3306/ict207";
   static String login="root";
   static String passwd="";
   static Connection cn=null;
   static Statement st=null;
   static PreparedStatement pst=null;
    public Serveur() {
        initComponents();
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgbox = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        msgbox1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msgbox.setColumns(20);
        msgbox.setRows(5);
        jScrollPane1.setViewportView(msgbox);

        jLabel1.setText("LISTE DES CLIENT CONNECTES");

        msgbox1.setColumns(20);
        msgbox1.setRows(5);
        jScrollPane3.setViewportView(msgbox1);

        jLabel2.setText("HISTORIQUE DES MESSAGES");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     */
    public static class ServeurMT extends Thread{
    int nbClients;
    String nom;
    private List<Conversation>clientsConnectes=new ArrayList<>();
    public void run() {
        try {
            try ( ServerSocket ss = new ServerSocket(1234)) {
                while (true) {
                Socket s = ss.accept();
                InputStream is=s.getInputStream();
                InputStreamReader isr= new InputStreamReader(is);
                OutputStream os= s.getOutputStream();
                BufferedReader br= new BufferedReader(isr);
                PrintWriter pw= new PrintWriter(os,true);
                 nbClients=Integer.parseInt(br.readLine());
                 Conversation c= new Conversation(s,nbClients);
                 clientsConnectes.add(c);
                  c.start();
                  new Conversation(s, nbClients).start();
                }
            }
        } catch (Exception e)    {
            e.printStackTrace();
        }
    }
    public void broadCast(String Message,int []numeroClient ) throws IOException{
        for(Conversation c:clientsConnectes){ 
            boolean trouve=false;
            for(int i=0;i<numeroClient.length;i++){
                if(c.numClients==numeroClient[i]){
                    trouve=true;
                    break;
                }
            }
            if(trouve==true){
              PrintWriter pw=new PrintWriter(c.s.getOutputStream(),true);
               pw.println(Message); 
            }

        }
    }
    class  Conversation extends  Thread{
        protected Socket s;
        protected int numClients;
        public  Conversation(Socket s, int numClients){
            super();
            this.s= s;
            this.numClients=numClients;
        }
        public void run(){
            try {
                InputStream is=s.getInputStream();
                InputStreamReader isr= new InputStreamReader(is);
                OutputStream os= s.getOutputStream();
                BufferedReader br= new BufferedReader(isr);
                PrintWriter pw= new PrintWriter(os,true);
                String Ip= s.getRemoteSocketAddress().toString();
                try {
                    String query = "select * from connexion where numero='"+numClients+"'";
                    cn = (Connection) DriverManager.getConnection(url, login, passwd);
                    //pst=(PreparedStatement) cn.prepareStatement(query);
                    st = (Statement)cn.createStatement();
                   ResultSet set = st.executeQuery(query);
                    if (set.next()) {
                        String id = set.getString(1);
                         nom = id;
                         
                    }
                msgbox.setText(msgbox.getText().trim()+"\nconnexion de : "+nom+  " client numero : "+numClients+" IP : "+Ip);
                pw.println(" vous etes "+nom+" le client numero "+numClients);
                } catch (HeadlessException | SQLException e) {
                }
                while (true){
                    String req;
                    while((req=br.readLine())!=null) {
                      msgbox1.setText(msgbox1.getText().trim()+Ip+"\n a envoyÃ© "+req);
                      String [] t= req.split("-");
                      String messa= t[0];
                      String[] t2=t[1].split(",");
                      int [] numeroClient= new int [t2.length];
                      for(int i=0;i<t2.length;i++){
                               numeroClient[i]=Integer.parseInt(t2[i]);
                      } 
                      broadCast(messa,numeroClient);
                    }
                }
            } catch (IOException e) {
            }
        }
    }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Serveur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Serveur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Serveur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Serveur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Serveur().setVisible(true);
            }
        });
         new ServeurMT().start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private static javax.swing.JTextArea msgbox;
    private static javax.swing.JTextArea msgbox1;
    // End of variables declaration//GEN-END:variables

}